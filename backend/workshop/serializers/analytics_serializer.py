"""
Serializers for analytics data.
These serializers handle the data structure for analytics API responses.
"""
from rest_framework import serializers


class MonthlyRevenueSerializer(serializers.Serializer):
    """Serializer for monthly revenue data."""
    month = serializers.CharField(max_length=7, help_text="Month in YYYY-MM format")
    revenue = serializers.FloatField(help_text="Total revenue for the month")


class DailyBookingsSerializer(serializers.Serializer):
    """Serializer for daily bookings data."""
    date = serializers.CharField(max_length=10, help_text="Date in YYYY-MM-DD format")
    count = serializers.IntegerField(help_text="Number of bookings for the date")


class TopServicesSerializer(serializers.Serializer):
    """Serializer for top services data."""
    service = serializers.CharField(max_length=255, help_text="Name of the service")
    count = serializers.IntegerField(help_text="Number of times service was requested")


class CarTypesSerializer(serializers.Serializer):
    """Serializer for car types distribution data."""
    type = serializers.CharField(max_length=100, help_text="Type of car")
    count = serializers.IntegerField(help_text="Number of cars of this type")


class YearlyCarSerializer(serializers.Serializer):
    """Serializer for yearly car distribution data."""
    year = serializers.IntegerField(help_text="Manufacturing year of cars")
    count = serializers.IntegerField(help_text="Number of cars from this year")


class ProfitableServicesSerializer(serializers.Serializer):
    """Serializer for profitable services data."""
    service = serializers.CharField(max_length=255, help_text="Name of the service")
    revenue = serializers.FloatField(help_text="Total revenue generated by this service")


class PopularServicesSerializer(serializers.Serializer):
    """Serializer for popular services data."""
    service = serializers.CharField(max_length=255, help_text="Name of the service")
    count = serializers.IntegerField(help_text="Number of bookings for this service")


class TopSparePartsSerializer(serializers.Serializer):
    """Serializer for top spare parts data."""
    part = serializers.CharField(max_length=255, help_text="Name of the spare part")
    count = serializers.IntegerField(help_text="Quantity of parts used")


class AnalyticsMetricsSerializer(serializers.Serializer):
    """Serializer for analytics metrics data."""
    monthlyRevenue = serializers.FloatField(help_text="Current month revenue")
    totalBookings = serializers.IntegerField(help_text="Current month bookings")
    activeVehicles = serializers.IntegerField(help_text="Active vehicles count")
    servicesCompleted = serializers.IntegerField(help_text="Services completed this month")
    totalSales = serializers.FloatField(help_text="Total sales for the current month")
    productsUsedPrices = serializers.FloatField(help_text="Total cost of products used this month")
    salesRevenue = serializers.FloatField(help_text="Sales revenue after expenses")
    totalRevenue = serializers.FloatField(help_text="Total revenue after all expenses")


class PeriodSerializer(serializers.Serializer):
    """Serializer for period information."""
    month = serializers.CharField(max_length=20)
    year = serializers.IntegerField()
    start_date = serializers.CharField(max_length=10)
    end_date = serializers.CharField(max_length=10)


class BookingStatsSerializer(serializers.Serializer):
    """Serializer for booking statistics."""
    total_bookings = serializers.IntegerField()
    completed_bookings = serializers.IntegerField()
    completion_rate = serializers.FloatField()


class FinancialStatsSerializer(serializers.Serializer):
    """Serializer for financial statistics."""
    total_sales = serializers.FloatField()
    service_revenue = serializers.FloatField()
    products_used_cost = serializers.FloatField()
    gross_revenue = serializers.FloatField()
    net_revenue = serializers.FloatField()
    employee_salaries = serializers.FloatField()
    total_expenses = serializers.FloatField()
    total_profit = serializers.FloatField()
    profit_margin = serializers.FloatField()


class ProductSaleDetailSerializer(serializers.Serializer):
    """Serializer for individual product sale details."""
    product_name = serializers.CharField(max_length=255)
    variant_name = serializers.CharField(max_length=255)
    sku = serializers.CharField(max_length=100)
    quantity_sold = serializers.FloatField()
    revenue = serializers.FloatField()
    unit_price = serializers.FloatField()


class ProductStatsSerializer(serializers.Serializer):
    """Serializer for product statistics."""
    products_sold_quantity = serializers.FloatField()
    products_sold_value = serializers.FloatField()
    products_used_in_services = serializers.FloatField()
    product_sales_details = ProductSaleDetailSerializer(many=True)


class TopServiceSerializer(serializers.Serializer):
    """Serializer for top service data."""
    service_name = serializers.CharField(max_length=255)
    bookings_count = serializers.IntegerField()
    revenue = serializers.FloatField()


class ExpenseBreakdownSerializer(serializers.Serializer):
    """Serializer for expense breakdown."""
    category = serializers.CharField(max_length=50)
    total_amount = serializers.FloatField()
    transaction_count = serializers.IntegerField()


class MonthlyReportSerializer(serializers.Serializer):
    """Serializer for comprehensive monthly analytics report."""
    period = PeriodSerializer()
    bookings = BookingStatsSerializer()
    financial = FinancialStatsSerializer()
    products = ProductStatsSerializer()
    top_services = TopServiceSerializer(many=True)
    expense_breakdown = ExpenseBreakdownSerializer(many=True)
    generated_at = serializers.CharField()