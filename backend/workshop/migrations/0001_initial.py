# Generated by Django 5.2.4 on 2025-08-11 22:56

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('nic', models.CharField(editable=False, max_length=15, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('phone_number', models.CharField(max_length=15)),
                ('city', models.CharField(blank=True, max_length=30)),
                ('state', models.CharField(blank=True, max_length=30)),
                ('address', models.TextField(blank=True, max_length=30)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'customer',
            },
        ),
        migrations.CreateModel(
            name='DailyAvailability',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(unique=True)),
                ('total_slots', models.PositiveIntegerField(default=7, validators=[django.core.validators.MinValueValidator(1)])),
                ('available_slots', models.PositiveIntegerField(default=7, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'daily_availability',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('washing', 'Washing'), ('detailing', 'Detailing'), ('maintenance', 'Maintenance'), ('repair', 'Repair'), ('inspection', 'Inspection')], default='maintenance', max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'service',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=30)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('customer', 'Customer')], default='customer', max_length=20)),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Car',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('make', models.CharField(max_length=20)),
                ('model', models.CharField(max_length=20)),
                ('year', models.CharField(max_length=4)),
                ('license_plate', models.CharField(max_length=20, unique=True)),
                ('color', models.CharField(max_length=20)),
                ('vin', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cars', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'car',
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=20, unique=True)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'invoice',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('customer_feedback', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_bookings', to=settings.AUTH_USER_MODEL)),
                ('car', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='workshop.car')),
                ('daily_availability', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='workshop.dailyavailability')),
                ('invoice', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='workshop.invoice')),
            ],
            options={
                'db_table': 'booking',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('booking', 'Booking'), ('payment', 'Payment'), ('system', 'System'), ('reminder', 'Reminder'), ('alert', 'Alert')], default='system', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('booking_id', models.CharField(blank=True, max_length=36, null=True)),
                ('invoice_id', models.CharField(blank=True, max_length=36, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('currency', models.CharField(choices=[('PKR', 'Pakistani Rupee'), ('USD', 'US Dollar')], default='PKR', max_length=3)),
                ('payment_method', models.CharField(choices=[('credit_card', 'Credit Card'), ('debit_card', 'Debit Card'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash'), ('jazzcash', 'JazzCash'), ('easypaisa', 'Easypaisa'), ('nayapay', 'NayaPay'), ('sadapay', 'SadaPay'), ('payoneer', 'Payoneer'), ('wise', 'Wise (formerly TransferWise)'), ('ubl_omni', 'UBL Omni'), ('hbl_konnect', 'HBL Konnect')], max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('success', 'Success'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('chargeback', 'Chargeback'), ('expired', 'Expired')], default='pending', max_length=30)),
                ('gateway_transaction_id', models.CharField(blank=True, help_text="Payment gateway's transaction ID", max_length=255, null=True)),
                ('gateway_reference', models.CharField(blank=True, help_text='Payment gateway reference number', max_length=255, null=True)),
                ('gateway_name', models.CharField(blank=True, help_text='Name of payment gateway used', max_length=50, null=True)),
                ('gateway_response', models.JSONField(blank=True, help_text='Full gateway response for debugging', null=True)),
                ('jazzcash_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('easypaisa_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('nayapay_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sadapay_transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('bank_transaction_id', models.CharField(blank=True, help_text='For bank transfers', max_length=100, null=True)),
                ('mobile_number', models.CharField(blank=True, help_text='Mobile number used for payment', max_length=15, null=True)),
                ('cnic_number', models.CharField(blank=True, help_text='CNIC for verification', max_length=15, null=True)),
                ('fee_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Transaction fee charged by gateway', max_digits=10)),
                ('net_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount after fees', max_digits=10, null=True)),
                ('card_last_four', models.CharField(blank=True, max_length=4, null=True)),
                ('card_type', models.CharField(blank=True, max_length=20, null=True)),
                ('card_token', models.CharField(blank=True, help_text='Tokenized card reference', max_length=255, null=True)),
                ('payment_date', models.DateTimeField(blank=True, help_text='When payment was actually processed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When payment link/session expires', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Internal notes about payment', null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text="Customer's IP address", null=True)),
                ('user_agent', models.TextField(blank=True, help_text="Customer's browser user agent", null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('refund_reason', models.TextField(blank=True, null=True)),
                ('refunded_at', models.DateTimeField(blank=True, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='workshop.invoice')),
            ],
            options={
                'db_table': 'payment',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductVariant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('variant_name', models.CharField(max_length=30)),
                ('sku', models.CharField(max_length=50, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='workshop.product')),
            ],
            options={
                'db_table': 'product_variant',
            },
        ),
        migrations.CreateModel(
            name='InvoiceItems',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('quantity', models.PositiveIntegerField()),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='workshop.invoice')),
                ('product_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='workshop.productvariant')),
            ],
            options={
                'db_table': 'invoice_items',
            },
        ),
        migrations.CreateModel(
            name='BookingService',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('canceled', 'Canceled')], default='pending', max_length=20)),
                ('booking', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service', to='workshop.booking')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='workshop.service')),
            ],
        ),
        migrations.CreateModel(
            name='StockMovement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('change_amount', models.IntegerField(help_text='Positive for stock increase (restock), negative for stock decrease (sale)')),
                ('reason', models.CharField(choices=[('PURCHASE', 'Purchase/Restock'), ('SALE', 'Sale'), ('ADJUSTMENT', 'Inventory Adjustment'), ('DAMAGE', 'Damage/Loss'), ('RETURN', 'Customer Return'), ('TRANSFER', 'Transfer'), ('INITIAL', 'Initial Stock')], help_text='Reason for stock movement', max_length=20)),
                ('quantity_before', models.PositiveIntegerField(help_text='Stock quantity before this movement')),
                ('quantity_after', models.PositiveIntegerField(help_text='Stock quantity after this movement')),
                ('reference_id', models.CharField(blank=True, help_text='Reference to related transaction (invoice, purchase order, etc.)', max_length=100, null=True)),
                ('created_by', models.CharField(blank=True, help_text='User who initiated this movement', max_length=100)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('product_variant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stock_movements', to='workshop.productvariant')),
            ],
            options={
                'db_table': 'stock_movement',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['car'], name='booking_car_id_6559aa_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['transaction_id'], name='payment_transac_9ff03c_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['gateway_transaction_id'], name='payment_gateway_b923ad_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['jazzcash_transaction_id'], name='payment_jazzcas_3da473_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['easypaisa_transaction_id'], name='payment_easypai_72ea79_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['mobile_number'], name='payment_mobile__e2e0b4_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status', 'created_at'], name='payment_status_271abe_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_method', 'status'], name='payment_payment_cb4c74_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['product_variant', '-updated_at'], name='stock_movem_product_3c29c4_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['reason'], name='stock_movem_reason_283c31_idx'),
        ),
        migrations.AddIndex(
            model_name='stockmovement',
            index=models.Index(fields=['updated_at'], name='stock_movem_updated_466da8_idx'),
        ),
    ]
